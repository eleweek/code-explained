import * as React from 'react';
import {ProbingVisualization, GenerateProbingLinks} from './probing_visualization';

export function CollisionsTheory() {
    return (
        <>
            <h1>Коллизии в хеш-таблицах</h1>
            <p>
                Хеш-таблица — структура данных, хранящая пары «ключ-значение» или только ключ. Позволяет быстро найти
                ключ и, если есть, связанное с ним значение.
            </p>
            <h2>Как найти нужный элемент с помощью линейного поиска</h2>
            <p>
                Последовательно перебирать все элементы списка, пока не найдется требуемый. В худшем случае — придется
                проверить все элементы. А в среднем — половину.
            </p>
            <h2>Как найти нужный элемент хеш-таблицы</h2>
            <p>
                По ключу понять, с какого места таблицы искать. И начать поиск рядом с нужным элементом. В среднем такой
                поиск займет пару итераций.{' '}
            </p>
            <h2>Пример из реальной жизни</h2>
            <p>
                Представьте, что вы ищете книгу в библиотеке. Если книги стоят в случайном порядке, то придется
                перебирать все по одной, пока не найдете нужную. А если книги стоят в алфавитном порядке, то
                библиотекарь может пойти сразу к нужной полке и перебрать несколько книг, а не всю библиотеку.{' '}
            </p>
            <h2>Устройство простейшей хеш-таблицы</h2>
            <p>
                Простейшая хеш-таблица — это массив из ключей. Индекс ключа вычисляется по самому ключу. Однако у разных
                ключей индекс может совпасть. Такие ситуации называются коллизиями.{' '}
            </p>
            <p>
                В следующей визуализации мы разберемся, как решать коллизии и создадим простейшую хеш-таблицу без потери
                данных.
            </p>
        </>
    );
}

const {links: probingLinks} = new GenerateProbingLinks().run(8, '', 'i+1');

export function SimplifiedCreateTheory() {
    return (
        <>
            <h1>Коллизии в хеш-таблицах</h1>
            <p>
                Хеш-таблица — структура данных, хранящая пары «ключ-значение» или только ключ. Позволяет быстро найти
                ключ и, если есть, связанное с ним значение.
            </p>
            <p>
                Простейшая хеш-таблица — это массив из ключей. Индекс ключа вычисляется по самому ключу. Однако у разных
                ключей индекс может совпасть. Такие ситуации называются коллизиями.{' '}
            </p>
            <ProbingVisualization slotsCount={8} links={probingLinks} adjustTop={-65} fixedHeight={85} />
            <h2>Как разрешать коллизии</h2>
            <p>
                Если текущая ячейка занята, то мы проверим следующую. Если занята и она, то проверим следующую за ней. И
                так до тех пор, пока не найдем свободную ячейку.
            </p>
            <h2>Производительность и расход памяти</h2>
            <p>
                Чем больше свободного места в хеш-таблице, тем меньше коллизий. В пустой таблице не будет ни одной
                коллизии, а в почти полной — они будут почти наверняка.{' '}
            </p>
            <p>
                Однако чем больше свободного места, тем больше расходуется памяти. Поэтому при использовании хеш-таблиц
                стараются достичь баланса. Таблица должна быть не слишком пустой, но и не слишком заполненной. Проблемы
                с производительностью начиют быть заметны при заполненности на две трети.
            </p>
            <p>На нашей визуализации размер таблицы выбран так, чтобы таблица была заполнена наполовину.</p>
        </>
    );
}
